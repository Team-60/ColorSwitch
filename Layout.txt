Class App (My main screen) [Controller]
    Fields:
        - Database<Player>
        - Database<Games>
        - highscore (-1 for first ever game)
    Functions:
        - addAssets() { return void; }
        - formDatabase() { return void; }
        - newGame() { return Game; } (will be called be AppController which will transfer Game's instance to GamePlayController)
        - loadGame(int PlayerId) { return Game; } (Similar to new Game : notice one player can only have one loadGame)
        - restartGame() { return Game; } (refresh all states except the player's info)
        - leaderBoard() { return Database<Player>; } (will only be accessed by leaderBoardController)
        - exit() { return void } (perform all cleanUp operations and exit the Application)
        getter/setter highscore
        + giveId()
    Exceptions:
    Extends:
    Implements:

Class Database (Load game screen / Leaderboard in show) <Generic>
    Fields:
        - MAX_SIZE (Overriding param)
        - data ArrayList<T>
    Functions:
        // I am not sure about these functions yet
        // depends on how you if we are using instanceOf or getting value using getter
        + form() : void
        + retrieveData() : ArrayList<T>
        + update(T , pos) : void
    Exceptions:
        Exception (IO / ClassNotFound)
    Extends:
    Implements:

Class Game:
    Fields:
        - App (Binary Association) (Stronger form of dependency)
        - Player (Keep Info) (Player and game elements interact through ball) (Association) (As a constructor param)
        - Game Elements
        - ball
        - FILE_PATH (static final)
        + MID_LINE (static final)
        + STARS_RESTART (static final)
        + NUM_ELEMENTS (number of elements to spawn) (static final)
    Functions:
        + refreshGameElements() { return void; } (ensure proper pairings between stars / obstacles / switches) (discard) (reflectChanges in gui counterpart)
        - moveScreenRelative() (apply offset) { return void; }
        + registerJump() { return void; } (changes ball velocity)
        + checkAndUpdate() { return void; } (checks for interaction & score update & move screens)
        + pause() { return void; } (write into file) ? // can be avoided depends on our implementation of Game
        + resume() { return void; } (read from file) ? // can be avoided depends on our implementation of Game
        + save() { return void; } (write to load file)
        + getApp() {return App; }
        + getPlayer() {return Player; }
        + getFilePath() {return String; }
    Exceptions:
        ObstacleCollision
        FellDown
        NotEnoughStarsForRestart
    Extends:
    Implements:
        Serializable

Class Player:
    Fields:
        - name // it is necessary ?
        - id
        - score
        - FILE_PATH (static final)
    Functions:
        getter/setters
        + incrementScore() { return void; }
        + compareTo(Player) { return int; }
        + getFilePath {return string; }
    Exceptions:
    Extends:
    Implements:
        Serializable, Comparable

Class Ball:
    Fields:
        - x (static)
        - y
        - radius (static)
        - color
        - velocity
        - gravity (final static)
        - jumpSpeed (final static)
        - Circle sprite
    Functions:
        + jump() { return void; } // just sets velocity to jumpSpeed
        + move() { return int; } // returns the offset
        + refresh() { return void; }
        + destroy() {return void; }
        + checkFall() { return Boolean; }
        getx, gety
    Exceptions:
    Extends:
    Implements:
        Serializable

Class GameElements: (Abstract)
    Fields:
        - x
        - y
        - closestSafeDist
    Functions:
        + applyOffset (int offset) { return void; }
        + spawn(Pane pane) { return void; } (Abstract)
        + refresh() { return void; } (Abstract)
        + checkCollision(Ball ball) { return Boolean; } (Abstract)
        + destroy() { return void; } (Abstract)
        + getClosestSafeDist() { return int; }
    Exceptions:
    Extends:
    Implements:
        Serializable

Class Star:
    Fields:
        closestSafeDist static
        points static
        // will also contain GUI components but not sure what
    Functions:
        Overriding Abstract Methods
    Exceptions:
    Extends:
        GameElements
    Implements:

Class SwitchColor:
    Fields:
        closestSafeDist static
        predefined color
        // will also contain GUI components but not sure what
    Functions:
        Overriding Abstract Methods
    Exceptions:
    Extends:
        GameElements
    Implements:

Class Obstacle: (Abstract)
    Fields:
        translation speed
        rotation speed
    Functions:
        Implementing Abstract
    Exceptions:
    Extends:
        GameElements
    Implements:

Class ObsCircle:
    Fields:
        closestSafeDist static
        // will also contain GUI components but not sure what
        # radius
    Functions:
        spawn
        + refresh
        checkCollision
        + destroy
    Exceptions:
    Extends:
        Obstacle
    Implements:

Class ObsDoubleCircle:
    Fields:
        # radiusOut
        // will also contain GUI components but not sure what
    Functions: (Override)
        spawn
        + refresh
        checkCollision
        + destroy
    Exceptions:
    Extends:
        ObsCircle
    Implements:

Class ObsLine:
    Fields:
        closestSafeDist static
        // will also contain GUI components but not sure what
    Functions:
        spawn
        + refresh
        checkCollision
        + destroy
    Exceptions:
    Extends:
        Obstacle
    Implements:

Class ObsDoubleLine:
    Fields:
        closestSafeDist static
        // will also contain GUI components but not sure what
    Functions:
        spawn
        + refresh
        checkCollision
        + destroy
    Exceptions:
    Extends:
        ObsLine
    Implements:

Class ObsSquare:
    Fields:
        closestSafeDist static
        // will also contain GUI components but not sure what
    Functions:
        spawn
        + refresh
        checkCollision
        + destroy
    Exceptions:
    Extends:
        Obstacle
    Implements:

Custom Exceptions:
- Collision
- Fell Down
- Not enough stars for restart